// Trevor Shaw
// Pete Tucker
// 11.9 Geometry

#include <iostream>
#include <cmath>
using namespace std;

class Rectangle {
private:
	double x;
	double y;
	double width;
	double height;
	
public:
	double EdgeR = (x + (width / 2)); // Right edge
	double EdgeL = x - (width / 2); // Left edge
	double EdgeB = y + (height / 2); // Bottom edge
	double EdgeT = y - (height / 2); // Top edge
	Rectangle(){ x = 0, y = 0, width = 1, height = 1; }
	Rectangle(double x1, double y1, double width1, double height1) {
		setX(x1);
		setY(y1);
		setWidth(width1);
		setHeight(height1);
	}
	double getX(){
		return x;
	}
	void setX(int num){
		x = num;
	}
	double getY() {
		return y;
	}
	void setY(int num){
		y = num;
	}
	double getWidth(){
		return width;
	}
	void setWidth(double num){
		width = num;
	}
	double getHeight(){
		return height;
	}
	void setHeight(double num){
		height = num;
	}
	const double getArea(){
		const double area = (width + height) / 2;
		return area;
	}
	const double getPerimeter(){
		const double perimeter = (2 * width) + (2 * height);
		return perimeter;
	}
	bool containsPoint(double pointX, double pointY) {
		if (pointX < (x + (width/2)) && pointX > (x - (width/2)) && pointY < (y + (height/2)) && pointY > (y - (height/2))){
			return true;
		}
		else
			return false;
	}

	bool containsRect(const Rectangle &r) {
		double EdgeR = (x + (width / 2)); // Right edge
		double EdgeL = x - (width / 2); // Left edge
		double EdgeB = y + (height / 2); // Bottom edge
		double EdgeT = y - (height / 2); // Top edge
		if (r.EdgeR < EdgeR && r.EdgeL > EdgeL && r.EdgeB < EdgeB && r.EdgeT > EdgeT){
			return true;
		}
		else
			return false;
	}

	bool overlaps(const Rectangle &r) {
		double EdgeR = (x + (width / 2)); // Right edge
		double EdgeL = x - (width / 2); // Left edge
		double EdgeB = y + (height / 2); // Bottom edge
		double EdgeT = y - (height / 2); // Top edge
		if ((r.EdgeR<EdgeR && r.EdgeL < EdgeL)) 
			return true;
		else if ((r.EdgeR > EdgeR && r.EdgeL > EdgeL))
			return true;
		else if ((r.EdgeB < EdgeB && r.EdgeT < EdgeT))
			return true;
		else if ((r.EdgeB > EdgeB && r.EdgeT > EdgeT))
			return true;
		else return false;


	}

};



int main() {

	Rectangle r1(2, 2, 5.5, 4.9), r2(4, 5, 10.5, 3.2), r3(3, 5, 2.3, 5.4);
	cout << "R1 area: " << r1.getArea() << endl;
	cout << "R1 perimeter: " << r1.getPerimeter() << endl;
	if (r1.containsPoint(3, 3) == true)
		cout << "R1 contains point (3,3)\n";
	else
		cout << "R1 doesn't contain point (3,3)\n";
	if (r1.containsRect(r2) == true)
		cout << "R1 contains rectangle R2\n";
	else
		cout << "R1 doesn't contain rectangle R2\n";
	if (r1.overlaps(r3) == true) 
		cout << "R1 overlaps R3\n";
	else
		cout << "R1 doesn't overlap R3\n";
	

	return 0;
}
